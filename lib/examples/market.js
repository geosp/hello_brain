"use strict";

Object.defineProperty(exports, "__esModule", {
  value: true
});
exports.market = void 0;

var _fp = _interopRequireDefault(require("lodash/fp"));

var _brain = _interopRequireDefault(require("brain.js"));

var _train = require("../core/train");

var _market = _interopRequireDefault(require("../../data/training/market.json"));

var _market2 = require("../util/market");

function _interopRequireDefault(obj) { return obj && obj.__esModule ? obj : { "default": obj }; }

var market = function market() {
  var marketDataPreprocessor = function marketDataPreprocessor(data) {
    return _fp["default"].flow(_market2.getExtremes, (0, _market2.normalizeMarketData)(data), _fp["default"].chunk(5))(data);
  };

  var denormailizeData = function denormailizeData(data) {
    return _fp["default"].flow(_market2.getExtremes, (0, _market2.denormalizeMarketData)(data))(_market["default"]);
  };

  var trainingData = marketDataPreprocessor(_market["default"]);
  var neuroMarket = new _brain["default"].recurrent.LSTMTimeStep();
  neuroMarket.fromJSON((0, _train.train)({
    brainType: _brain["default"].recurrent.LSTMTimeStep,
    name: 'market',
    retrain: false,
    options: {
      hiddenLayers: [8, 8],
      inputSize: 4,
      outputSize: 4
    },
    trainingOptions: {
      learningRate: 0.005,
      errorThresh: 0.02
    },
    prepocessor: marketDataPreprocessor
  }));
  var marketInput = [trainingData[0][0]];
  var marketOutput = neuroMarket.run(marketInput);
  console.log({
    marketInput: marketInput,
    denormailizedMarketOutput: denormailizeData([marketOutput])
  });
  var marketForcastInput = [trainingData[0][0], trainingData[0][1]];
  var marketForcastOutput = neuroMarket.forecast(marketForcastInput, 3);
  console.log({
    marketForcastInput: marketForcastInput,
    denormailizedMarketOutput: denormailizeData(marketForcastOutput)
  });
};

exports.market = market;
//# sourceMappingURL=data:application/json;charset=utf-8;base64,eyJ2ZXJzaW9uIjozLCJzb3VyY2VzIjpbIi4uLy4uL3NyYy9leGFtcGxlcy9tYXJrZXQudHMiXSwibmFtZXMiOlsibWFya2V0IiwibWFya2V0RGF0YVByZXByb2Nlc3NvciIsImRhdGEiLCJfIiwiZmxvdyIsImdldEV4dHJlbWVzIiwiY2h1bmsiLCJkZW5vcm1haWxpemVEYXRhIiwibWFya2V0RGF0YSIsInRyYWluaW5nRGF0YSIsIm5ldXJvTWFya2V0IiwiYnJhaW4iLCJyZWN1cnJlbnQiLCJMU1RNVGltZVN0ZXAiLCJmcm9tSlNPTiIsImJyYWluVHlwZSIsIm5hbWUiLCJyZXRyYWluIiwib3B0aW9ucyIsImhpZGRlbkxheWVycyIsImlucHV0U2l6ZSIsIm91dHB1dFNpemUiLCJ0cmFpbmluZ09wdGlvbnMiLCJsZWFybmluZ1JhdGUiLCJlcnJvclRocmVzaCIsInByZXBvY2Vzc29yIiwibWFya2V0SW5wdXQiLCJtYXJrZXRPdXRwdXQiLCJydW4iLCJjb25zb2xlIiwibG9nIiwiZGVub3JtYWlsaXplZE1hcmtldE91dHB1dCIsIm1hcmtldEZvcmNhc3RJbnB1dCIsIm1hcmtldEZvcmNhc3RPdXRwdXQiLCJmb3JlY2FzdCJdLCJtYXBwaW5ncyI6Ijs7Ozs7OztBQUFBOztBQUNBOztBQUNBOztBQUNBOztBQUNBOzs7O0FBTU8sSUFBSUEsTUFBTSxHQUFHLFNBQVRBLE1BQVMsR0FBTTtBQUN4QixNQUFNQyxzQkFBc0IsR0FBRyxTQUF6QkEsc0JBQXlCLENBQUFDLElBQUk7QUFBQSxXQUNqQ0MsZUFBRUMsSUFBRixDQUNFQyxvQkFERixFQUVFLGtDQUFvQkgsSUFBcEIsQ0FGRixFQUdFQyxlQUFFRyxLQUFGLENBQVEsQ0FBUixDQUhGLEVBSUVKLElBSkYsQ0FEaUM7QUFBQSxHQUFuQzs7QUFNQSxNQUFNSyxnQkFBZ0IsR0FBRyxTQUFuQkEsZ0JBQW1CLENBQUFMLElBQUk7QUFBQSxXQUMzQkMsZUFBRUMsSUFBRixDQUNFQyxvQkFERixFQUVFLG9DQUFzQkgsSUFBdEIsQ0FGRixFQUdFTSxrQkFIRixDQUQyQjtBQUFBLEdBQTdCOztBQUtBLE1BQU1DLFlBQVksR0FBR1Isc0JBQXNCLENBQUNPLGtCQUFELENBQTNDO0FBQ0EsTUFBSUUsV0FBVyxHQUFHLElBQUlDLGtCQUFNQyxTQUFOLENBQWdCQyxZQUFwQixFQUFsQjtBQUNBSCxFQUFBQSxXQUFXLENBQUNJLFFBQVosQ0FDRSxrQkFBTTtBQUNKQyxJQUFBQSxTQUFTLEVBQUVKLGtCQUFNQyxTQUFOLENBQWdCQyxZQUR2QjtBQUVKRyxJQUFBQSxJQUFJLEVBQUUsUUFGRjtBQUdKQyxJQUFBQSxPQUFPLEVBQUUsS0FITDtBQUlKQyxJQUFBQSxPQUFPLEVBQUU7QUFBRUMsTUFBQUEsWUFBWSxFQUFFLENBQUMsQ0FBRCxFQUFJLENBQUosQ0FBaEI7QUFBd0JDLE1BQUFBLFNBQVMsRUFBRSxDQUFuQztBQUFzQ0MsTUFBQUEsVUFBVSxFQUFFO0FBQWxELEtBSkw7QUFLSkMsSUFBQUEsZUFBZSxFQUFFO0FBQUVDLE1BQUFBLFlBQVksRUFBRSxLQUFoQjtBQUF1QkMsTUFBQUEsV0FBVyxFQUFFO0FBQXBDLEtBTGI7QUFNSkMsSUFBQUEsV0FBVyxFQUFFeEI7QUFOVCxHQUFOLENBREY7QUFVQSxNQUFJeUIsV0FBVyxHQUFHLENBQUNqQixZQUFZLENBQUMsQ0FBRCxDQUFaLENBQWdCLENBQWhCLENBQUQsQ0FBbEI7QUFDQSxNQUFJa0IsWUFBWSxHQUFHakIsV0FBVyxDQUFDa0IsR0FBWixDQUFnQkYsV0FBaEIsQ0FBbkI7QUFDQUcsRUFBQUEsT0FBTyxDQUFDQyxHQUFSLENBQVk7QUFBRUosSUFBQUEsV0FBVyxFQUFYQSxXQUFGO0FBQWVLLElBQUFBLHlCQUF5QixFQUFFeEIsZ0JBQWdCLENBQUMsQ0FBQ29CLFlBQUQsQ0FBRDtBQUExRCxHQUFaO0FBQ0EsTUFBSUssa0JBQWtCLEdBQUcsQ0FDdkJ2QixZQUFZLENBQUMsQ0FBRCxDQUFaLENBQWdCLENBQWhCLENBRHVCLEVBRXZCQSxZQUFZLENBQUMsQ0FBRCxDQUFaLENBQWdCLENBQWhCLENBRnVCLENBQXpCO0FBSUEsTUFBSXdCLG1CQUFtQixHQUFHdkIsV0FBVyxDQUFDd0IsUUFBWixDQUFxQkYsa0JBQXJCLEVBQXlDLENBQXpDLENBQTFCO0FBQ0FILEVBQUFBLE9BQU8sQ0FBQ0MsR0FBUixDQUFZO0FBQUVFLElBQUFBLGtCQUFrQixFQUFsQkEsa0JBQUY7QUFBc0JELElBQUFBLHlCQUF5QixFQUFFeEIsZ0JBQWdCLENBQUMwQixtQkFBRDtBQUFqRSxHQUFaO0FBQ0QsQ0FqQ00iLCJzb3VyY2VzQ29udGVudCI6WyJpbXBvcnQgXyBmcm9tICdsb2Rhc2gvZnAnXG5pbXBvcnQgYnJhaW4gZnJvbSAnYnJhaW4uanMnXG5pbXBvcnQgeyB0cmFpbiB9IGZyb20gJy4uL2NvcmUvdHJhaW4nXG5pbXBvcnQgbWFya2V0RGF0YSBmcm9tICcuLi8uLi9kYXRhL3RyYWluaW5nL21hcmtldC5qc29uJ1xuaW1wb3J0IHtcbiAgZ2V0RXh0cmVtZXMsXG4gIG5vcm1hbGl6ZU1hcmtldERhdGEsXG4gIGRlbm9ybWFsaXplTWFya2V0RGF0YSxcbn0gZnJvbSAnLi4vdXRpbC9tYXJrZXQnXG5cbmV4cG9ydCBsZXQgbWFya2V0ID0gKCkgPT4ge1xuICBjb25zdCBtYXJrZXREYXRhUHJlcHJvY2Vzc29yID0gZGF0YSA9PlxuICAgIF8uZmxvdyhcbiAgICAgIGdldEV4dHJlbWVzLFxuICAgICAgbm9ybWFsaXplTWFya2V0RGF0YShkYXRhKSxcbiAgICAgIF8uY2h1bmsoNSlcbiAgICApKGRhdGEpXG4gIGNvbnN0IGRlbm9ybWFpbGl6ZURhdGEgPSBkYXRhID0+IFxuICAgIF8uZmxvdyhcbiAgICAgIGdldEV4dHJlbWVzLFxuICAgICAgZGVub3JtYWxpemVNYXJrZXREYXRhKGRhdGEpXG4gICAgKShtYXJrZXREYXRhKVxuICBjb25zdCB0cmFpbmluZ0RhdGEgPSBtYXJrZXREYXRhUHJlcHJvY2Vzc29yKG1hcmtldERhdGEpXG4gIGxldCBuZXVyb01hcmtldCA9IG5ldyBicmFpbi5yZWN1cnJlbnQuTFNUTVRpbWVTdGVwKClcbiAgbmV1cm9NYXJrZXQuZnJvbUpTT04oXG4gICAgdHJhaW4oe1xuICAgICAgYnJhaW5UeXBlOiBicmFpbi5yZWN1cnJlbnQuTFNUTVRpbWVTdGVwLFxuICAgICAgbmFtZTogJ21hcmtldCcsXG4gICAgICByZXRyYWluOiBmYWxzZSxcbiAgICAgIG9wdGlvbnM6IHsgaGlkZGVuTGF5ZXJzOiBbOCwgOF0sIGlucHV0U2l6ZTogNCwgb3V0cHV0U2l6ZTogNCB9LFxuICAgICAgdHJhaW5pbmdPcHRpb25zOiB7IGxlYXJuaW5nUmF0ZTogMC4wMDUsIGVycm9yVGhyZXNoOiAwLjAyIH0sXG4gICAgICBwcmVwb2Nlc3NvcjogbWFya2V0RGF0YVByZXByb2Nlc3NvcixcbiAgICB9KVxuICApXG4gIGxldCBtYXJrZXRJbnB1dCA9IFt0cmFpbmluZ0RhdGFbMF1bMF1dXG4gIGxldCBtYXJrZXRPdXRwdXQgPSBuZXVyb01hcmtldC5ydW4obWFya2V0SW5wdXQpXG4gIGNvbnNvbGUubG9nKHsgbWFya2V0SW5wdXQsIGRlbm9ybWFpbGl6ZWRNYXJrZXRPdXRwdXQ6IGRlbm9ybWFpbGl6ZURhdGEoW21hcmtldE91dHB1dF0pIH0pXG4gIGxldCBtYXJrZXRGb3JjYXN0SW5wdXQgPSBbXG4gICAgdHJhaW5pbmdEYXRhWzBdWzBdLFxuICAgIHRyYWluaW5nRGF0YVswXVsxXSxcbiAgXVxuICBsZXQgbWFya2V0Rm9yY2FzdE91dHB1dCA9IG5ldXJvTWFya2V0LmZvcmVjYXN0KG1hcmtldEZvcmNhc3RJbnB1dCwgMylcbiAgY29uc29sZS5sb2coeyBtYXJrZXRGb3JjYXN0SW5wdXQsIGRlbm9ybWFpbGl6ZWRNYXJrZXRPdXRwdXQ6IGRlbm9ybWFpbGl6ZURhdGEobWFya2V0Rm9yY2FzdE91dHB1dCkgfSlcbn1cbiJdfQ==